
Hangman code

*********************************************************
Try multiple yields

2.6.3 :010 > def A_B
2.6.3 :011?>   puts "hii"
2.6.3 :012?>   puts "go"
2.6.3 :013?>   yield
2.6.3 :014?>   yield
2.6.3 :015?>   yield
2.6.3 :016?>   puts "bye"
2.6.3 :017?>   end
 => :A_B 
2.6.3 :018 > A_B do
2.6.3 :019 >     puts"go"
2.6.3 :020?>   end
hii
go
go
go
go
bye
 => nil 
2.6.3 :021 >

***********yield eith parameters 
def J_P
puts " hii"
yield("john",2)
end
J_P do |name,age|
puts "#{name} is #{age} old"
end
yeild return a value return by the block
def A
puts "hii"
no=yield
puts "#{no}"
end
A do
2
end
 

***************************************************************8
What happens if block is not passed to a function?
if we are not providing the block to the yield then it will give the error like no block for(yield) 
 block_given? == this method is retuen true/false depending block is passedor not 

**************************************************************
How to check whether block is sent explicitly?
if we are passing  the block as parameter.
def each_explicit(&block)
  return to_enum(:each) unless block
  i = 0
  while i < size
    block.call at(i)
    i += 1
  end
end

in explicit block the 

***************************************************
How to pass a block implicitly?
in implicite  blocks we will provide the block in method

//def each
  return to_enum(:each) unless block_given?

  i = 0
  while i < size
    yield at(i)
    i += 1
  end
end 
//


*******************************************************
What are the different ways to call lambda?
A=->{puts "Welcome to snjb"}
calling ===>
A.call

A=->{puts "welcome"}
calling====>
A.()
A[]
A.===


**************************************************************
Find differences between lambda and proc.

1.their is no dedecated lambda class where the proc is object 
2.lambda returns normally like regular methord but proc will try return from current context  
3. lambda are define with -> {}  and proc with Proc.new{}
Why to use proc and lambda?
Lamda:==
lambada  is used to defin the block with parameters	
we can save the lambada for future use
we can use the multiple arguments to the lambda
proc:==
my_proc = Proc.new { return 1 }
puts "Proc result: #{my_proc.call}"

proc is block itself bt it is bound the variable 


